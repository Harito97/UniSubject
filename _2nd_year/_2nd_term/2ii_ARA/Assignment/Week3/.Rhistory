# ******************************************************************************
# install.packages("datasets")
library(datasets)
data = data(iris)
? iris
names(iris)
set.seed(1)   #co dinh data de khi chay ham sample, nrow, ... thi data khong thay doi ngau nhien sau cac lan
View(iris)
# Use 70% of dataset as training set and remaining 30% as testing set
sample = sample(c(TRUE, FALSE), nrow(iris), replace = TRUE, prob = c(0.7, 0.3))
? sample
table(sample)   # Biet ty le cua tap false & true
# Step1.
# Chia tap data
train = subset(iris, sample == TRUE)
test = subset(iris, sample == FALSE)
train = iris[sample,]
test = iris[!sample,]
dim(train)
dim(test)
# Sau Step1. Bo du lieu iris gom 150 quan sat duoc chia lam 2 bo du lieu con: training 106 qsat & testing 44 qsat
# Step2.
# Viet mo hinh hoi quy tuyen tinh cua Sepal.Length theo Petal.Length
attach(iris)
lmSe_Pe = lm(train$Sepal.Length ~ train$Petal.Length)
lmSe_Pe
summary(lmSe_Pe)  #Summary de danh gia he so
confint(lmSe_Pe, level = 0.9)  #Khoang tin cay 95% cho cac he so
# Step3.
# Mo hinh hoi quy la:
Y_predict = lmSe_Pe$coefficients[1] + lmSe_Pe$coefficients[2] * test$Petal.Length
#Y_mean_predict = mean(Y_predict)
#TSS = sum((test$Sepal.Length - Y_mean_predict)^2)
TSS = sum((test$Sepal.Length - mean(test$Sepal.Length))^2)
TSS
RSS = sum((test$Sepal.Length - Y_predict)^2)
RSS
R2 = 1 - RSS/TSS
R2
sqrt(R2)
source("D:/University/RegressionAnalysisAndApplications/Assignment/Week4/W4.DemoInClass.R")
source("D:/University/RegressionAnalysisAndApplications/Assignment/Week2/W2.Homework.R")
library(datasets)
data(cars)
View(cars)
set.seed(1)   #co dinh data de khi chay ham sample, nrow, ... thi data khong thay doi ngau nhien sau cac lan
# Bài 1. Chia bộ dữ liệu cars thành hai bộ dữ liệu con: training (65%) và testing (35%)
# Step1.
# Use 65% of dataset as training set and remaining 35% as testing set
sample = sample(c(TRUE, FALSE), nrow(iris), replace = TRUE, prob = c(0.65, 0.35))
train = cars[sample,]
test = cars[!sample,]
dim(train)
dim(test)
# Bài 2. Phân tích hồi quy tuyến tính của biến dist theo speed  trên bộ dữ liệu training.
# Step2.
lmDis_Speed = lm(cars$dist ~ cars$speed)
lmDis_Speed
summary(lmDis_Speed)
source("D:/University/RegressionAnalysisAndApplications/Assignment/Week4/W4.DemoInClass.R")
# Bài 1. Chia bộ dữ liệu cars thành hai bộ dữ liệu con: training (65%) và testing (35%)
# Step1.
# Use 65% of dataset as training set and remaining 35% as testing set
sample = sample(c(TRUE, FALSE), nrow(cars), replace = TRUE, prob = c(0.65, 0.35))
train = cars[sample,]
test = cars[!sample,]
dim(train)
dim(test)
# Bài 2. Phân tích hồi quy tuyến tính của biến dist theo speed  trên bộ dữ liệu training.
# Step2.
lmDis_Speed = lm(cars$dist ~ cars$speed)
lmDis_Speed
summary(lmDis_Speed)
confint(lmDis_Speed)
#Khoang tin cay 95% cho cac he so
#Khoang tin cay 95% cho cac he so
# Danh gia he mo cua mo hinh
#Khoang tin cay 95% cho cac he so
# Danh gia he mo cua mo hinh
# H0: a_0 = 0 | H1 a_0 != 0
#Khoang tin cay 95% cho cac he so
# Danh gia he mo cua mo hinh
# H0: a_0 = 0 | H1 a_0 != 0
# p-value: < 0.0123 < 0.05 -> Bac bo H0:
# H0: a_1 = 0 | H1: a_1 != 0
# H0: a_1 = 0 | H1: a_1 != 0
# p-value: < 1.49e-12 < 0.05 -> Bac bo H0:
# Dua ra R-squared = 0.6511
# Dua ra R-squared = 0.6511
# Uoc luong he so hoi quy la
# Dua ra R-squared = 0.6511
# Uoc luong he so hoi quy la
# Coefficients:
# Dua ra R-squared = 0.6511
# Uoc luong he so hoi quy la
# Coefficients:
#             Estimate
# Dua ra R-squared = 0.6511
# Uoc luong he so hoi quy la
# Coefficients:
#             Estimate
# (Intercept) -17.5791    = a_0_h
# Bài 3. Đánh giá trên bộ dữ liệu testing.
# Step3.
dist_predict = lmDis_Speed$coefficients[1] + lmDis_Speed$coefficients[2] * test$speed
TSS = sum((test$dist - mean(test$dist))^2)
TSS
RSS = sum((test$dist - dist_predict)^2)
RSS
R2 = 1 - RSS/TSS
R2
sqrt(R2)
source("D:/University/RegressionAnalysisAndApplications/Assignment/Week4/W4.Homework.R")
# Bài 3. Đánh giá trên bộ dữ liệu testing.
# Step3.
dist_predict = lmDis_Speed$coefficients[1] + lmDis_Speed$coefficients[2] * test$speed
TSS = sum((test$dist - mean(test$dist))^2)
TSS
RSS = sum((test$dist - dist_predict)^2)
RSS
R2 = 1 - RSS/TSS
R2
sqrt(R2)
confint(lmDis_Speed)
dim(train)
dim(test)
dim(train)
dim(test)
View(cars)
# ******************************************************************************
# install.packages("datasets")
library(datasets)
data = data(iris)
? iris
names(iris)
set.seed(1)   #co dinh data de khi chay ham sample, nrow, ... thi data khong thay doi ngau nhien sau cac lan
# Use 70% of dataset as training set and remaining 30% as testing set
sample = sample(c(TRUE, FALSE), nrow(iris), replace = TRUE, prob = c(0.7, 0.3))
? sample
table(sample)   # Biet ty le cua tap false & true
table(sample)
# Bài 1. Chia bộ dữ liệu cars thành hai bộ dữ liệu con: training (65%) và testing (35%)
# Step1.
# Use 65% of dataset as training set and remaining 35% as testing set
sample = sample(c(TRUE, FALSE), nrow(cars), replace = TRUE, prob = c(0.65, 0.35))
train = cars[sample,]
test = cars[!sample,]
dim(train)
dim(test)
table(sample)
library(datasets)
data(cars)
View(cars)
set.seed(1)   #co dinh data de khi chay ham sample, nrow, ... thi data khong thay doi ngau nhien sau cac lan
# Bài 1. Chia bộ dữ liệu cars thành hai bộ dữ liệu con: training (65%) và testing (35%)
# Step1.
# Use 65% of dataset as training set and remaining 35% as testing set
sample = sample(c(TRUE, FALSE), nrow(cars), replace = TRUE, prob = c(0.65, 0.35))
train = cars[sample,]
test = cars[!sample,]
dim(train)
dim(test)
table(sample)
# Bài 1. Chia bộ dữ liệu cars thành hai bộ dữ liệu con: training (65%) và testing (35%)
# Step1.
# Use 65% of dataset as training set and remaining 35% as testing set
sample = sample(c(TRUE, FALSE), nrow(cars), replace = TRUE, prob = c(0.65, 0.35))
train = cars[sample,]
test = cars[!sample,]
dim(train)
dim(test)
table(sample)
# Bài 2. Phân tích hồi quy tuyến tính của biến dist theo speed  trên bộ dữ liệu training.
# Step2.
lmDis_Speed = lm(cars$dist ~ cars$speed)
lmDis_Speed
summary(lmDis_Speed)
confint(lmDis_Speed)
# Bài 3. Đánh giá trên bộ dữ liệu testing.
# Step3.
dist_predict = lmDis_Speed$coefficients[1] + lmDis_Speed$coefficients[2] * test$speed
TSS = sum((test$dist - mean(test$dist))^2)
TSS
RSS = sum((test$dist - dist_predict)^2)
RSS
R2 = 1 - RSS/TSS
R2
sqrt(R2)
set.seed(1)   #co dinh data de khi chay ham sample, nrow, ... thi data khong thay doi ngau nhien sau cac lan
# Bài 1. Chia bộ dữ liệu cars thành hai bộ dữ liệu con: training (65%) và testing (35%)
# Step1.
# Use 65% of dataset as training set and remaining 35% as testing set
sample = sample(c(TRUE, FALSE), nrow(cars), replace = TRUE, prob = c(0.65, 0.35))
train = cars[sample,]
test = cars[!sample,]
dim(train)
dim(test)
table(sample)
# Bài 2. Phân tích hồi quy tuyến tính của biến dist theo speed  trên bộ dữ liệu training.
# Step2.
lmDis_Speed = lm(cars$dist ~ cars$speed)
lmDis_Speed
# Bài 1. Chia bộ dữ liệu cars thành hai bộ dữ liệu con: training (65%) và testing (35%)
# Step1.
# Use 65% of dataset as training set and remaining 35% as testing set
sample = sample(c(TRUE, FALSE), nrow(cars), replace = TRUE, prob = c(0.65, 0.35))
train = cars[sample,]
test = cars[!sample,]
dim(train)
dim(test)
table(sample)
set.seed(1)   #co dinh data de khi chay ham sample, nrow, ... thi data khong thay doi ngau nhien sau cac lan
# Bài 1. Chia bộ dữ liệu cars thành hai bộ dữ liệu con: training (65%) và testing (35%)
# Step1.
# Use 65% of dataset as training set and remaining 35% as testing set
sample = sample(c(TRUE, FALSE), nrow(cars), replace = TRUE, prob = c(0.65, 0.35))
train = cars[sample,]
test = cars[!sample,]
dim(train)
dim(test)
clear
cls
end
library(datasets)
data(cars)
View(cars)
set.seed(1)   #co dinh data de khi chay ham sample, nrow, ... thi data khong thay doi ngau nhien sau cac lan
# Bài 1. Chia bộ dữ liệu cars thành hai bộ dữ liệu con: training (65%) và testing (35%)
# Step1.
# Use 65% of dataset as training set and remaining 35% as testing set
sample = sample(c(TRUE, FALSE), nrow(cars), replace = TRUE, prob = c(0.65, 0.35))
train = cars[sample,]
test = cars[!sample,]
dim(train)
dim(test)
table(sample)
# Bài 2. Phân tích hồi quy tuyến tính của biến dist theo speed  trên bộ dữ liệu training.
# Step2.
lmDis_Speed = lm(cars$dist ~ cars$speed)
lmDis_Speed
summary(lmDis_Speed)
confint(lmDis_Speed)
# Bài 3. Đánh giá trên bộ dữ liệu testing.
# Step3.
dist_predict = lmDis_Speed$coefficients[1] + lmDis_Speed$coefficients[2] * test$speed
TSS = sum((test$dist - mean(test$dist))^2)
TSS
RSS = sum((test$dist - dist_predict)^2)
RSS
R2 = 1 - RSS/TSS
R2
sqrt(R2)
# Bài 1. Chia bộ dữ liệu cars thành hai bộ dữ liệu con: training (65%) và testing (35%)
# Step1.
# Use 65% of dataset as training set and remaining 35% as testing set
sample = sample(c(TRUE, FALSE), nrow(cars), replace = TRUE, prob = c(0.65, 0.35))
train = cars[sample,]
test = cars[!sample,]
dim(train)
dim(test)
table(sample)
# ******************************************************************************
# install.packages("datasets")
library(datasets)
data = data(iris)
? iris
names(iris)
set.seed(1)   #co dinh data de khi chay ham sample, nrow, ... thi data khong thay doi ngau nhien sau cac lan
View(iris)
# Use 70% of dataset as training set and remaining 30% as testing set
sample = sample(c(TRUE, FALSE), nrow(iris), replace = TRUE, prob = c(0.7, 0.3))
? sample
table(sample)   # Biet ty le cua tap false & true
# Step1.
# Chia tap data
train = subset(iris, sample == TRUE)
test = subset(iris, sample == FALSE)
train = iris[sample,]
test = iris[!sample,]
dim(train)
dim(test)
# Step2.
# Viet mo hinh hoi quy tuyen tinh cua Sepal.Length theo Petal.Length
attach(iris)
# Step2.
# Viet mo hinh hoi quy tuyen tinh cua Sepal.Length theo Petal.Length
attach(iris)
# Step2.
# Viet mo hinh hoi quy tuyen tinh cua Sepal.Length theo Petal.Length
lmSe_Pe = lm(train$Sepal.Length ~ train$Petal.Length)
lmSe_Pe
summary(lmSe_Pe)  #Summary de danh gia he so
confint(lmSe_Pe, level = 0.9)  #Khoang tin cay 95% cho cac he so
# Step3.
# Mo hinh hoi quy la:
Y_predict = lmSe_Pe$coefficients[1] + lmSe_Pe$coefficients[2] * test$Petal.Length
#Y_mean_predict = mean(Y_predict)
#TSS = sum((test$Sepal.Length - Y_mean_predict)^2)
TSS = sum((test$Sepal.Length - mean(test$Sepal.Length))^2)
TSS
RSS = sum((test$Sepal.Length - Y_predict)^2)
RSS
R2 = 1 - RSS/TSS
R2
sqrt(R2)
data(cars)
View(cars)
set.seed(9)   #co dinh data de khi chay ham sample, nrow, ... thi data khong thay doi ngau nhien sau cac lan
# Bài 1. Chia bộ dữ liệu cars thành hai bộ dữ liệu con: training (65%) và testing (35%)
# Step1.
# Use 65% of dataset as training set and remaining 35% as testing set
sample = sample(c(TRUE, FALSE), nrow(cars), replace = TRUE, prob = c(0.65, 0.35))
train = cars[sample,]
test = cars[!sample,]
dim(train)
dim(test)
table(sample)
# Bài 2. Phân tích hồi quy tuyến tính của biến dist theo speed  trên bộ dữ liệu training.
# Step2.
lmDis_Speed = lm(cars$dist ~ cars$speed)
lmDis_Speed
summary(lmDis_Speed)
confint(lmDis_Speed)
# Bài 3. Đánh giá trên bộ dữ liệu testing.
# Step3.
dist_predict = lmDis_Speed$coefficients[1] + lmDis_Speed$coefficients[2] * test$speed
TSS = sum((test$dist - mean(test$dist))^2)
TSS
RSS = sum((test$dist - dist_predict)^2)
RSS
R2 = 1 - RSS/TSS
R2
sqrt(R2)
library(datasets)
data(cars)
set.seed(9)   #co dinh data de khi chay ham sample, nrow, ... thi data khong thay doi ngau nhien sau cac lan
# Bài 1. Chia bộ dữ liệu cars thành hai bộ dữ liệu con: training (65%) và testing (35%)
# Step1.
# Use 65% of dataset as training set and remaining 35% as testing set
sample = sample(c(TRUE, FALSE), nrow(cars), replace = TRUE, prob = c(0.65, 0.35))
train = cars[sample,]
test = cars[!sample,]
dim(train)
dim(test)
table(sample)
# Bài 2. Phân tích hồi quy tuyến tính của biến dist theo speed  trên bộ dữ liệu training.
# Step2.
lmDis_Speed = lm(cars$dist ~ cars$speed)
lmDis_Speed
summary(lmDis_Speed)
confint(lmDis_Speed)
# Bài 3. Đánh giá trên bộ dữ liệu testing.
# Step3.
dist_predict = lmDis_Speed$coefficients[1] + lmDis_Speed$coefficients[2] * test$speed
TSS = sum((test$dist - mean(test$dist))^2)
TSS
RSS = sum((test$dist - dist_predict)^2)
RSS
R2 = 1 - RSS/TSS
R2
sqrt(R2)
# ******************************************************************************
# install.packages("datasets")
library(datasets)
data = data(iris)
? iris
names(iris)
set.seed(1)   #co dinh data de khi chay ham sample, nrow, ... thi data khong thay doi ngau nhien sau cac lan
View(iris)
# Use 70% of dataset as training set and remaining 30% as testing set
sample = sample(c(TRUE, FALSE), nrow(iris), replace = TRUE, prob = c(0.7, 0.3))
? sample
table(sample)   # Biet ty le cua tap false & true
# Step1.
# Chia tap data
train = subset(iris, sample == TRUE)
test = subset(iris, sample == FALSE)
train = iris[sample,]
test = iris[!sample,]
dim(train)
dim(test)
# Step2.
# Viet mo hinh hoi quy tuyen tinh cua Sepal.Length theo Petal.Length
attach(iris)
lmSe_Pe = lm(train$Sepal.Length ~ train$Petal.Length)
lmSe_Pe
summary(lmSe_Pe)  #Summary de danh gia he so
confint(lmSe_Pe, level = 0.9)  #Khoang tin cay 95% cho cac he so
# Step3.
# Mo hinh hoi quy la:
Y_predict = lmSe_Pe$coefficients[1] + lmSe_Pe$coefficients[2] * test$Petal.Length
#Y_mean_predict = mean(Y_predict)
#TSS = sum((test$Sepal.Length - Y_mean_predict)^2)
TSS = sum((test$Sepal.Length - mean(test$Sepal.Length))^2)
TSS
RSS = sum((test$Sepal.Length - Y_predict)^2)
RSS
R2 = 1 - RSS/TSS
R2
sqrt(R2)
library(datasets)
data(cars)
View(cars)
set.seed(9)   #co dinh data de khi chay ham sample, nrow, ... thi data khong thay doi ngau nhien sau cac lan
# Bài 1. Chia bộ dữ liệu cars thành hai bộ dữ liệu con: training (65%) và testing (35%)
# Step1.
# Use 65% of dataset as training set and remaining 35% as testing set
sample = sample(c(TRUE, FALSE), nrow(cars), replace = TRUE, prob = c(0.65, 0.35))
train = cars[sample,]
test = cars[!sample,]
dim(train)
dim(test)
table(sample)
# Bài 2. Phân tích hồi quy tuyến tính của biến dist theo speed  trên bộ dữ liệu training.
# Step2.
lmDis_Speed = lm(cars$dist ~ cars$speed)
lmDis_Speed
summary(lmDis_Speed)
confint(lmDis_Speed)
# Bài 3. Đánh giá trên bộ dữ liệu testing.
# Step3.
dist_predict = lmDis_Speed$coefficients[1] + lmDis_Speed$coefficients[2] * test$speed
TSS = sum((test$dist - mean(test$dist))^2)
TSS
RSS = sum((test$dist - dist_predict)^2)
RSS
R2 = 1 - RSS/TSS
R2
sqrt(R2)
