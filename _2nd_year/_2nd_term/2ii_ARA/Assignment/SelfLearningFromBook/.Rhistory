# Khởi tạo data
set.seed(1)
y = rnorm(100)
x1 = rnorm(100)
x2 = rnorm(100)
x3 = rnorm(100)
x4 = rnorm(100)
e = rnorm(100, 0, 0.01)
#data = data.frame(y, x1, x2, x3, x4)
data = data.frame(y, x)
data
set.seed(1)
y = rnorm(100)
x = rnorm(100)
e = rnorm(100, 0, 0.01)
# Tạo lại giá trị cho y cho phụ thuộc vào x
y = x -2*x^2 + e
# Mô hình ở đây là y = x -2*x^2 + error
# plot(x, y, main = "scatterplot")
plot(x, y)
# Nhận xét ở đây là dựa vào đồ thì y là 1 hàm bậc 2 của x
# Khởi tạo data
set.seed(1)
e = rnorm(100, 0, 0.01)
data = data.frame(y, x)
data
cv.error = rep(0,4)
# tạo ra 1 vector cv.error để lưu giá trị 5 phần tử dùng sau này
for (i in 1:4){
glm.fit=glm(y~poly(x,i),data=data)
cv.error[i]=cv.glm(data,glm.fit)$delta[1]
}
cv.error
plot(cv.error, type = "l", ylim = c(18,25))
# Nhận xét là sử dụng mô hình 2 biến cho ra kết quả sai số MSE thấp nhất
cv.error = rep(0,4)
# tạo ra 1 vector cv.error để lưu giá trị 5 phần tử dùng sau này
for (i in 1:4){
glm.fit=glm(y~poly(x,i),data=data)
cv.error[i]=cv.glm(data,glm.fit)$delta[1]
}
cv.error
plot(cv.error, type = "l", ylim = c(-1,6))
# Nhận xét là sử dụng mô hình 2 biến cho ra kết quả sai số MSE thấp nhất
set.seed(3)
y = rnorm(100)
x = rnorm(100)
e = rnorm(100, 0, 0.01)
# Tạo lại giá trị cho y cho phụ thuộc vào x
y = x -2*x^2 + e
cv.error.4 = rep(0,4)
for (i in 1:4) {
glm1 = glm(y ~ poly(x, i))
cv.error.4[i] = cv.glm(data.frame(x,y), glm1)$delta[1]
}
cv.error.4
set.seed(3)
#y = rnorm(100)
#x = rnorm(100)
#e = rnorm(100, 0, 0.01)
# Tạo lại giá trị cho y cho phụ thuộc vào x
#y = x -2*x^2 + e
cv.error.4 = rep(0,4)
for (i in 1:4) {
glm1 = glm(y ~ poly(x, i))
cv.error.4[i] = cv.glm(data.frame(x,y), glm1)$delta[1]
}
cv.error.4
set.seed(1)
y = rnorm(100)
x = rnorm(100)
e = rnorm(100, 0, 0.01)
# Tạo lại giá trị cho y cho phụ thuộc vào x
y = x -2*x^2 + e
# Mô hình ở đây là y = x -2*x^2 + error
# plot(x, y, main = "scatterplot")
plot(x, y)
# Nhận xét ở đây là dựa vào đồ thì y là 1 hàm bậc 2 của x
# Khởi tạo data
set.seed(1)
data = data.frame(y, x)
data
cv.error = rep(0,4)
# tạo ra 1 vector cv.error để lưu giá trị 5 phần tử dùng sau này
for (i in 1:4){
glm.fit=glm(y~poly(x,i),data=data)
cv.error[i]=cv.glm(data,glm.fit)$delta[1]
}
cv.error
plot(cv.error, type = "l", ylim = c(-1,6))
# Nhận xét là sử dụng mô hình 2 biến cho ra kết quả sai số MSE thấp nhất
set.seed(1)
y = rnorm(100)
x = rnorm(100)
e = rnorm(100, 0, 0.01)
# Tạo lại giá trị cho y cho phụ thuộc vào x
y = x -2*x^2 + e
# Mô hình ở đây là y = x -2*x^2 + error
# plot(x, y, main = "scatterplot")
plot(x, y)
# Nhận xét ở đây là dựa vào đồ thì y là 1 hàm bậc 2 của x
# Khởi tạo data
set.seed(1)
data = data.frame(y, x)
data
cv.error = rep(0,4)
# tạo ra 1 vector cv.error để lưu giá trị 5 phần tử dùng sau này
for (i in 1:4){
glm.fit=glm(y~poly(x,i),data=data)
cv.error[i]=cv.glm(data,glm.fit)$delta[1]
}
set.seed(1)
y = rnorm(100)
x = rnorm(100)
e = rnorm(100, 0, 0.01)
# Tạo lại giá trị cho y cho phụ thuộc vào x
y = x -2*x^2 + e
# Mô hình ở đây là y = x -2*x^2 + error
# plot(x, y, main = "scatterplot")
plot(x, y)
# Nhận xét ở đây là dựa vào đồ thì y là 1 hàm bậc 2 của x
# Khởi tạo data
set.seed(1)
data = data.frame(y, x)
data
cv.error = rep(0,4)
# tạo ra 1 vector cv.error để lưu giá trị 5 phần tử dùng sau này
for (i in 1:4){
glm.fit=glm(y~poly(x,i),data=data)
cv.error[i]=cv.glm(data,glm.fit)$delta[1]
}
set.seed(1)
y = rnorm(100)
x = rnorm(100)
e = rnorm(100, 0, 0.01)
# Tạo lại giá trị cho y cho phụ thuộc vào x
y = x -2*x^2 + e
# Mô hình ở đây là y = x -2*x^2 + error
# plot(x, y, main = "scatterplot")
plot(x, y)
# Nhận xét ở đây là dựa vào đồ thì y là 1 hàm bậc 2 của x
# Khởi tạo data
set.seed(1)
data = data.frame(y, x)
data
cv.error = rep(0,4)
# tạo ra 1 vector cv.error để lưu giá trị 5 phần tử dùng sau này
for (i in 1:4){
glm.fit=glm(y~poly(x,i),data=data)
cv.error[i]=cv.glm(data,glm.fit)$delta[1]
}
cv.error = rep(0,4)
# tạo ra 1 vector cv.error để lưu giá trị 5 phần tử dùng sau này
for (i in 1:4){
glm.fit=glm(y~poly(x,i),data=data)
cv.error[i]=cv.glm(data,glm.fit)$delta[1]
}
library(boot)
cv.error = rep(0,4)
# tạo ra 1 vector cv.error để lưu giá trị 5 phần tử dùng sau này
for (i in 1:4){
glm.fit=glm(y~poly(x,i),data=data)
cv.error[i]=cv.glm(data,glm.fit)$delta[1]
}
cv.error
plot(cv.error, type = "l", ylim = c(-1,6))
# Nhận xét là sử dụng mô hình 2 biến cho ra kết quả sai số MSE thấp nhất
set.seed(3)
#y = rnorm(100)
#x = rnorm(100)
#e = rnorm(100, 0, 0.01)
# Tạo lại giá trị cho y cho phụ thuộc vào x
#y = x -2*x^2 + e
cv.error.4 = rep(0,4)
for (i in 1:4) {
glm1 = glm(y ~ poly(x, i))
cv.error.4[i] = cv.glm(data.frame(x,y), glm1)$delta[1]
}
cv.error.4
install.packages("leaps")
library ( ISLR )
fix ( Hitters )
names ( Hitters )
dim ( Hitters )
# đếm số hàng có giá trị trống
sum ( is.na ( Hitters$Salary ) )
# loại bỏ những hàng có dữ liệu Salary bị trống
Hitters = na.omit ( Hitters )
# check again the data
dim ( Hitters )
# đếm số hàng có giá trị trống
sum ( is.na ( Hitters$Salary ) )
# install.packages("leaps")
library (leaps)
regfit.full = regsubsets( Salary~. , Hitters )
summary ( regfit.full )
regfit.full=regsubsets (Salary~.,data=Hitters ,nvmax=19)
reg.summary =summary (regfit.full)
regfit.full=regsubsets (Salary~.,data=Hitters ,nvmax=19)
reg.summary =summary (regfit.full)
names(reg.summary)
reg.summary$rsq
par(mfrow=c(2,2))
plot(reg.summary$rss ,xlab="Number of Variables ",ylab="RSS",
type="l")
plot(reg.summary$adjr2 ,xlab="Number of Variables ",
ylab="Adjusted RSq",type="l")
which.max(reg.summary$adjr2)
points (11, reg.summary$adjr2[11], col="red", cex=2, pch =20)
which.max(reg.summary$adjr2)
points (11, reg.summary$adjr2[11], col= "red", cex=2, pch =20)
which.max(reg.summary$adjr2)
points (11,reg.summary$adjr2[11], col="red",cex=2,pch =20)
which.max(reg.summary$adjr2)
points(11,reg.summary$adjr2[11], col="red",cex=2,pch =20)
which.max(reg.summary$adjr2)
points(11,reg.summary$adjr2[11], col= "red",cex=2,pch =20)
plot(reg.summary$cp ,xlab="Number of Variables ",ylab="Cp",
type= 'l')
which.min(reg.summary$cp )
points (10,reg.summary$cp [10], col ="red",cex=2,pch =20)
which.min(reg.summary$bic )
plot(reg.summary$bic ,xlab="Number of Variables ",ylab="BIC",
type= 'l')
points (6,reg.summary$bic [6],col="red",cex=2,pch =20)
plot(regfit.full ,scale="r2")
plot(regfit.full ,scale="adjr2")
plot(regfit.full ,scale="Cp")
plot(regfit.full ,scale="bic")
coef(regfit.full ,6)
library ( ISLR )
fix ( Hitters )
names ( Hitters )
dim ( Hitters )
# đếm số hàng có giá trị trống
sum ( is.na ( Hitters$Salary ) )
# loại bỏ những hàng có dữ liệu Salary bị trống
Hitters = na.omit ( Hitters )
# check again the data
dim ( Hitters )
# đếm số hàng có giá trị trống
sum ( is.na ( Hitters$Salary ) )
# install.packages("leaps")
library (leaps)
regfit.full = regsubsets( Salary~. , Hitters )
summary ( regfit.full )
regfit.full=regsubsets (Salary~.,data=Hitters ,nvmax=19)
reg.summary =summary (regfit.full)
names(reg.summary)
reg.summary$rsq
par(mfrow=c(2,2))
plot(reg.summary$rss, xlab="Number of Variables", ylab="RSS",
type="l")
plot(reg.summary$adjr2, xlab="Number of Variables",
ylab="Adjusted RSq",type="l")
which.max(reg.summary$adjr2)
points(11,reg.summary$adjr2[11], col= "red",cex=2,pch =20)
par(mfrow=c(2,2))
plot(reg.summary$rss, xlab="Number of Variables", ylab="RSS",
type="l")
plot(reg.summary$adjr2, xlab="Number of Variables",
ylab="Adjusted RSq",type="l")
which.max(reg.summary$adjr2)
points(11,reg.summary$adjr2[11], col= "red",cex=2,pch =20)
par(mfrow=c(2,2))
plot(reg.summary$rss, xlab="Number of Variables", ylab="RSS",
type="l")
plot(reg.summary$adjr2, xlab="Number of Variables",
ylab="Adjusted RSq",type="l")
which.max(reg.summary$adjr2)
points(11,reg.summary$adjr2[11], col= "red",cex=2,pch =20)
plot(reg.summary$cp ,xlab="Number of Variables ",ylab="Cp",
type= 'l')
which.min(reg.summary$cp )
points (10,reg.summary$cp [10], col ="red",cex=2,pch =20)
which.min(reg.summary$bic )
plot(reg.summary$bic ,xlab="Number of Variables ",ylab="BIC",
type= 'l')
points (6,reg.summary$bic [6],col="red",cex=2,pch =20)
par(mfrow=c(2,2))
plot(reg.summary$rss, xlab="Number of Variables", ylab="RSS",
type="l")
points(11,reg.summary$adjr2[11], col= "red",cex=2,pch =20)
plot(reg.summary$adjr2, xlab="Number of Variables",
ylab="Adjusted RSq",type="l")
which.max(reg.summary$adjr2)
points(11,reg.summary$adjr2[11], col= "red",cex=2,pch =20)
plot(reg.summary$cp ,xlab="Number of Variables ",ylab="Cp",
type= 'l')
which.min(reg.summary$cp )
points (10,reg.summary$cp [10], col ="red",cex=2,pch =20)
which.min(reg.summary$bic )
plot(reg.summary$bic ,xlab="Number of Variables ",ylab="BIC",
type= 'l')
points (6,reg.summary$bic [6],col="red",cex=2,pch =20)
par(mfrow=c(2,2))
plot(reg.summary$rss, xlab="Number of Variables", ylab="RSS",
type="l")
points(11,reg.summary$rss[11], col= "red",cex=2,pch =20)
plot(reg.summary$adjr2, xlab="Number of Variables",
ylab="Adjusted RSq",type="l")
which.max(reg.summary$adjr2)
points(11,reg.summary$adjr2[11], col= "red",cex=2,pch =20)
plot(reg.summary$cp ,xlab="Number of Variables ",ylab="Cp",
type= 'l')
which.min(reg.summary$cp )
points (10,reg.summary$cp [10], col ="red",cex=2,pch =20)
which.min(reg.summary$bic )
plot(reg.summary$bic ,xlab="Number of Variables ",ylab="BIC",
type= 'l')
points (6,reg.summary$bic [6],col="red",cex=2,pch =20)
par(mfrow=c(2,2))
plot(reg.summary$rss, xlab="Number of Variables", ylab="RSS",
type="l")
which.min(reg.summary$rss)
points(11,reg.summary$rss[11], col= "red",cex=2,pch =20)
plot(reg.summary$adjr2, xlab="Number of Variables",
ylab="Adjusted RSq",type="l")
which.max(reg.summary$adjr2)
points(11,reg.summary$adjr2[11], col= "red",cex=2,pch =20)
plot(reg.summary$cp ,xlab="Number of Variables ",ylab="Cp",
type= 'l')
which.min(reg.summary$cp)
points(10,reg.summary$cp [10], col ="red",cex=2,pch =20)
plot(reg.summary$bic ,xlab="Number of Variables ",ylab="BIC",
type= 'l')
which.min(reg.summary$bic)
points(6,reg.summary$bic [6],col="red",cex=2,pch =20)
regfit.fwd=regsubsets (Salary~.,data=Hitters , nvmax=19,
method ="forward")
summary (regfit.fwd)
regfit.bwd=regsubsets (Salary~.,data=Hitters , nvmax=19,
method ="backward")
summary (regfit.bwd)
coef(regfit.full ,7)
coef(regfit.fwd ,7)
coef(regfit.bwd ,7)
set.seed(1)
train=sample(c(TRUE, FALSE), nrow(Hitters), rep=TRUE)
test=(!train)
regfit.best=regsubsets (Salary~.,data=Hitters[train ,],
nvmax=19)
test.mat=model.matrix(Salary~.,data=Hitters [test ,])
val.errors =rep(NA ,19)
for(i in 1:19){
coefi=coef(regfit.best ,id=i)
pred=test.mat[,names(coefi)]%*%coefi
val.errors[i]=mean(( Hitters$Salary[test]-pred)^2)
}
val.errors
which.min(val.errors)
coef(regfit.best ,10)
predict.regsubsets =function (object , newdata ,id ,...){
+ form=as.formula (object$call [[2]])
+ mat=model.matrix(form ,newdata )
+ coefi=coef(object ,id=id)
+ xvars=names(coefi)
+ mat[,xvars]%*%coefi
}
regfit.best=regsubsets (Salary~.,data=Hitters ,nvmax=19)
regfit.best=regsubsets (Salary~.,data=Hitters ,nvmax=19)
coef(regfit.best ,10)
for(j in 1:k){
best.fit=regsubsets (Salary~.,data=Hitters [folds!=j,],
nvmax=19)
for(i in 1:19){
+ pred=predict (best.fit ,Hitters [folds ==j,],id=i)
+ cv.errors[j,i]= mean( ( Hitters$Salary[ folds==j]-pred)^2)
}
}
k=10
set.seed(1)
folds=sample (1:k,nrow(Hitters),replace=TRUE)
cv.errors =matrix (NA,k,19, dimnames =list(NULL , paste (1:19) ))
for(j in 1:k){
best.fit=regsubsets (Salary~.,data=Hitters [folds!=j,],
nvmax=19)
for(i in 1:19){
+ pred=predict (best.fit ,Hitters [folds ==j,],id=i)
+ cv.errors[j,i]= mean( ( Hitters$Salary[ folds==j]-pred)^2)
}
}
k=10
set.seed(1)
folds=sample (1:k,nrow(Hitters),replace=TRUE)
cv.errors =matrix (NA,k,19, dimnames =list(NULL , paste (1:19) ))
for(j in 1:k){
best.fit=regsubsets (Salary~.,data=Hitters [folds!=j,],nvmax=19)
for(i in 1:19){
pred=predict (best.fit ,Hitters [folds ==j,],id=i)
cv.errors[j,i]= mean( ( Hitters$Salary[ folds==j]-pred)^2)
}
}
val.errors =rep(NA ,19)
for(i in 1:19){
coefi=coef(regfit.best ,id=i)
# UL hệ số trong mô hình i biến tốt nhất
pred=test.mat[,names(coefi)]%*%coefi
# dự đoán y_h
val.errors[i]=mean(( Hitters$Salary[test]-pred)^2)
# MSE = 1 / n * (y - h_h) ^ 2 trong test set
}
# Tính MSE tương ứng với 19 mô hình (trong test set)
# pred = y_h = a^T * X
coefi = coef(regfit.best, id = 2)
coefi
head(test.mat[, names(coefi)])
val.errors # kết quả có thể khác nhau
which.min(val.errors)
which.min(val.errors)
which.min(val.errors)
library ( ISLR )
fix ( Hitters )
names ( Hitters )
dim ( Hitters )
# đếm số hàng có giá trị trống
sum ( is.na ( Hitters$Salary ) )
# loại bỏ những hàng có dữ liệu Salary bị trống
Hitters = na.omit ( Hitters )
# check again the data
dim ( Hitters )
# đếm số hàng có giá trị trống
sum ( is.na ( Hitters$Salary ) )
# install.packages("leaps")
library (leaps)
regfit.full = regsubsets( Salary~. , Hitters )
summary ( regfit.full )
regfit.full=regsubsets (Salary~.,data=Hitters ,nvmax=19)
reg.summary =summary (regfit.full)
names(reg.summary)
reg.summary$rsq
par(mfrow=c(2,2))
plot(reg.summary$rss, xlab="Number of Variables", ylab="RSS",
type="l")
which.min(reg.summary$rss)
points(11,reg.summary$rss[11], col= "red",cex=2,pch =20)
plot(reg.summary$adjr2, xlab="Number of Variables",
ylab="Adjusted RSq",type="l")
which.max(reg.summary$adjr2)
points(11,reg.summary$adjr2[11], col= "red",cex=2,pch =20)
plot(reg.summary$cp ,xlab="Number of Variables ",ylab="Cp",
type= 'l')
which.min(reg.summary$cp)
points(10,reg.summary$cp [10], col ="red",cex=2,pch =20)
plot(reg.summary$bic ,xlab="Number of Variables ",ylab="BIC",
type= 'l')
which.min(reg.summary$bic)
points(6,reg.summary$bic [6],col="red",cex=2,pch =20)
plot(regfit.full ,scale="r2")
plot(regfit.full ,scale="adjr2")
plot(regfit.full ,scale="Cp")
plot(regfit.full ,scale="bic")
coef(regfit.full ,6)
# Mô hình 6 biến phù hợp nhất với tiêu chuẩn RSS
regfit.fwd=regsubsets (Salary~.,data=Hitters , nvmax=19, method ="forward")
summary (regfit.fwd)
regfit.bwd=regsubsets (Salary~.,data=Hitters , nvmax=19, method ="backward")
summary (regfit.bwd)
coef(regfit.full ,7)
coef(regfit.fwd ,7)
coef(regfit.bwd ,7)
set.seed(1)
train=sample(c(TRUE, FALSE), nrow(Hitters), rep=TRUE)
test=(!train)
regfit.best=regsubsets (Salary~.,data=Hitters[train ,],
nvmax=19)
test.mat=model.matrix(Salary~.,data=Hitters [test ,])
val.errors =rep(NA ,19) # NA hay gì cũng được (chỉ cần thỏa mãn có 19 phần tử, tương ứng 19 biến)
for(i in 1:19){
coefi=coef(regfit.best ,id=i)
# UL hệ số trong mô hình i biến tốt nhất
pred=test.mat[,names(coefi)]%*%coefi # %*% là nhân 2 ma trận
# dự đoán y_h
val.errors[i]=mean(( Hitters$Salary[test]-pred)^2)
# MSE = 1 / n * (y - h_h) ^ 2 trong test set
}
# Mục đích chính ở đây là: Tính MSE tương ứng với 19 mô hình (trong test set)
# pred = y_h = a^T * X
coefi = coef(regfit.best, id = 2)
coefi
head(test.mat[, names(coefi)])
val.errors # kết quả có thể khác nhau
which.min(val.errors)
coef(regfit.best ,7)
coef(regfit.best ,7)
# vì which.min(sai số) ra mô hình 7 biến
# kết quả về biến và hệ số khác so với việc sử dụng data là train set
# nó khác biệt so với việc sử dụng toàn bộ tập dữ liệu (sẽ ra 10 biến giống nhwu sách)
regfit.best=regsubsets (Salary~.,data=Hitters ,nvmax=19)
coef(regfit.best ,10)
k=10
set.seed(1)
folds=sample (1:k,nrow(Hitters),replace=TRUE)
cv.errors = matrix (NA,k,19, dimnames =list(NULL , paste (1:19) ))
for(j in 1:k){
best.fit=regsubsets (Salary~.,data=Hitters [folds!=j,],nvmax=19)
for(i in 1:19){
pred=predict (best.fit ,Hitters [folds ==j,],id=i)
cv.errors[j,i]= mean( ( Hitters$Salary[ folds==j]-pred)^2)
}
}
k=10
set.seed(1)
folds=sample (1:k,nrow(Hitters),replace=TRUE)
cv.errors = matrix (NA,k,19, dimnames =list(NULL , paste (1:19) ))
for(j in 1:k){
best.fit=regsubsets (Salary~.,data=Hitters [folds!=j,],nvmax=19)
for(i in 1:19){
pred=predict (best.fit ,Hitters [folds ==j,],id=i)
cv.errors[j,i]= mean( ( Hitters$Salary[ folds==j]-pred)^2)
}
}
